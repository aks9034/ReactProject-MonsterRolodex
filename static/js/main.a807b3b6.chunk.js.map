{"version":3,"sources":["Component/card/card.component.jsx","Component/Card-List/card-list.component.jsx","Component/Search box/searc-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","monster_array","map","SearchBox","placeholder","handlechange","type","onChange","App","e","setState","searchField","target","value","state","monsters","fetch","then","result","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TAIaA,EAAO,SAAAC,GAChB,OACA,sBAAKC,UAAW,iBAAhB,UACI,qBAAKC,IAAM,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,qBACxB,mCAAML,EAAMI,QAAQE,KAApB,WCHKC,G,MAAW,SAACP,GACrB,OACA,qBAAKC,UAAW,YAAhB,SAEMD,EAAMQ,cAAcC,KAAI,SAACL,GAAD,OACxB,cAAC,EAAD,CAAwBA,QAAWA,GAAvBA,EAAQC,WCNjBK,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,uBAAOC,KAAM,SACbZ,UAAU,SACVU,YAAcA,EACdG,SAAYF,MCkCLG,E,kDApCb,aAAe,IAAD,8BACZ,gBAaFH,aAAe,SAACI,GAAD,OAAO,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAZ1D,EAAKC,MAAQ,CACXC,SAAW,GACXJ,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBK,MAAM,8CACLC,MAAK,SAACC,GAAD,OAAYA,EAAOC,UACxBF,MAAK,SAACG,GAAD,OAAW,EAAKV,SAAS,CAACK,SAAWK,S,oBAK7C,WACE,MAAgCC,KAAKP,MAA9BC,EAAP,EAAOA,SAAUJ,EAAjB,EAAiBA,YAEXW,EAAkBP,EAASQ,QAAO,SAAA1B,GACtC,OAAOA,EAAQE,KAAKyB,cAAcC,SAASd,EAAYa,kBAGzD,OACE,sBAAK9B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACAU,YAAc,kBACdC,aAAgBgB,KAAKhB,eAErB,cAAC,EAAD,CAAUJ,cAAiBqB,EAA3B,sB,GA/BUI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a807b3b6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './card.style.css'\r\n\r\nexport const Card = props => {\r\n    return (\r\n    <div className= \"card-container\">\r\n        <img alt = 'monster' src = {`https://robohash.org/${props.monster.id}?set=set2&80*80`}/>\r\n        <h2> {props.monster.name} </h2>\r\n    </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component'\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n    <div className= 'card-list'>\r\n        {\r\n          props.monster_array.map((monster) => \r\n          <Card key= {monster.id} monster = {monster}/>\r\n          )\r\n        }\r\n    </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handlechange}) => {\r\n    return(\r\n        <input type= 'search'\r\n        className=\"search\" \r\n        placeholder= {placeholder}\r\n        onChange = {handlechange}/>\r\n    )\r\n}","\nimport React, {Component} from 'react';\nimport './App.css'\nimport {CardList} from './Component/Card-List/card-list.component'\nimport {SearchBox} from './Component/Search box/searc-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { \n      monsters : [],\n      searchField :''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then((result) => result.json())//convert to JSON from promise\n    .then((users) => this.setState({monsters : users}))\n  }\n\n  handlechange = (e) => this.setState({searchField : e.target.value})\n\n  render() {\n    const {monsters, searchField} = this.state;\n\n    const filteredMonster = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase())\n    }) \n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox \n        placeholder = 'search monsters'\n        handlechange = {this.handlechange} /* we dont use () because render method will invoke this if we add () */\n        />\n        <CardList monster_array = {filteredMonster}> </CardList>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}